@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@inject SparkflyManager Sparkfly

<MudPaper Class="pa-4">
    <MudStack Row="true">
        <MudImage ObjectFit="ObjectFit.Cover" Height="64" Src=@Track.CoverSizesUrl[(int)CoverSize.Small] Alt="Album cover" Elevation="25" Class="rounded-sm" />
        <MudStack Justify="Justify.Center" Spacing="0">
            <MudText Typo="Typo.body1">
                @(Track.SongName?.Length <= MAX_CHARS ? Track.SongName : Track.SongName?.Substring(0, MAX_CHARS) + "...")
            </MudText>
            <MudText Typo="Typo.body2">@Track.ArtistsNames[0]</MudText>
        </MudStack>

        <MudSpacer />

        <div>
            @switch (BtnFunc)
            {
                case BtnFunctionality.Add:
                    <MudIconButton OnClick="OnButtonClick" Icon="@Icons.Material.Filled.PlaylistAdd" Color="Color.Success" aria-label="add to queue"></MudIconButton>
                    break;

                case BtnFunctionality.Remove:
                    <MudIconButton OnClick="OnButtonClick" Icon="@Icons.Material.Filled.PlaylistRemove" Color="Color.Error" aria-label="remove from queue"></MudIconButton>
                    break;

                default:
                    break;
            }
        </div>
    </MudStack>
</MudPaper>

@code {
    private const int MAX_CHARS = 26;

    public enum BtnFunctionality { Add, Remove }

    [Parameter, EditorRequired] public Track Track { get; set; } = new();
    [Parameter] public BtnFunctionality? BtnFunc { get; set; }
    [Parameter] public EventCallback<Track> OnClickCallback { get; set; }

    private async Task OnButtonClick() => await OnClickCallback.InvokeAsync(Track);
}
