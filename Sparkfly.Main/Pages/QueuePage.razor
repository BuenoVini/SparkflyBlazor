@page "/queue"
@using Sparkfly.Main.Components
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@inject SparkflyManager Sparkfly
@inject ProtectedSessionStorage ProtectedSession

<MudStack>
    <h3>Queue</h3>

    @if (Sparkfly.Votes is not null)
    {
        @foreach (var vote in Sparkfly.Votes)
        {
            @if (vote.Client.Id == _thisClient?.Id && !vote.IsOnSpotifyQueue)
            {
                <TrackCard Track="vote.VotedTrack" Client="vote.Client" OnClickCallback="@RemoveVote" BtnFunc="TrackCard.BtnFunctionality.Remove" />
            }
            else
            {
                <TrackCard Track="vote.VotedTrack" Client="vote.Client" />
            }
        }
    }

</MudStack>

@code {
    private Client? _thisClient;

    protected override async Task OnInitializedAsync()
    {
        _thisClient = (await ProtectedSession.GetAsync<Client>("this_client")).Value;

        Sparkfly.TimerUpdateEvent += UpdateUi;
        Sparkfly.VotingQueueUpdateEvent += UpdateUi;
    }

    private async void UpdateUi(object? source, EventArgs args) => await InvokeAsync(StateHasChanged);

    private void RemoveVote(Track track)
    {
        if (_thisClient is not null)
            Sparkfly.RemoveVote(track, _thisClient);
    }

    public void Dispose()
    {
        Sparkfly.TimerUpdateEvent -= UpdateUi;
        Sparkfly.VotingQueueUpdateEvent -= UpdateUi;
    }
}
