@page "/queue"
@using Sparkfly.Main.Components
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@inject SparkflyManager Sparkfly
@inject ProtectedLocalStorage LocalStorage
@inject IStringLocalizer<QueuePage> Text

<PageTitle>@Text["page_title"]</PageTitle>

<MudStack>
    <MudText Align="Align.Center" Typo="Typo.h4">
        @Text["page_title"]
    </MudText>

    @if (Sparkfly.Votes is not null)
    {
        @foreach (int i in Enumerable.Range(0, Sparkfly.Votes.Count))
        {
            <MudDivider />

            <MudText Align="Align.Center" Typo="Typo.h6">@Text["priority"] @(i + 1)</MudText>

            @foreach (var vote in Sparkfly.Votes[i])
            {
                @if (vote.Client.Id == _thisClient?.Id && !vote.IsOnSpotifyQueue)
                {
                    <TrackCard Track="vote.VotedTrack" Client="vote.Client" OnClickCallback="@RemoveVote" BtnFunc="TrackCard.BtnFunctionality.Remove" />
                }
                else
                {
                    <TrackCard Track="vote.VotedTrack" Client="vote.Client" />
                }
            }
        }


        <MudDivider />


        <MudText Align="Align.Center" Typo="Typo.h5">
            @Text["header_1"]
        </MudText>
        <MudText Align="Align.Center" Typo="Typo.body1">
            @Text["about_1"]
        </MudText>
        <MudText Align="Align.Center" Typo="Typo.body1">
            @Text["about_2"]
        </MudText>
    }
</MudStack>

@code {
    private Client? _thisClient;
    private ExecutionContext? _originalContext;

    protected override void OnInitialized()
    {
        _originalContext = ExecutionContext.Capture();

        Sparkfly.TimerUpdateEvent += UpdateUi;
        Sparkfly.VotingQueueUpdateEvent += UpdateUi;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisClient = (await LocalStorage.GetAsync<Client>("this_client")).Value;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async void UpdateUi(object? source, EventArgs args)
    {
        /* FIXED: page falling back to default culture - https://github.com/dotnet/aspnetcore/issues/28521 */
        if (_originalContext is not null)
        {
            ExecutionContext.Restore(_originalContext);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void RemoveVote(Track track)
    {
        if (_thisClient is not null)
            Sparkfly.RemoveVote(track, _thisClient);
    }

    public void Dispose()
    {
        Sparkfly.TimerUpdateEvent -= UpdateUi;
        Sparkfly.VotingQueueUpdateEvent -= UpdateUi;
    }
}
