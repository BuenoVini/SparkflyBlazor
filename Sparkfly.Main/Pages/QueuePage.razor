@page "/queue"
@using Sparkfly.Main.Components
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@inject SparkflyManager Sparkfly

<MudStack>
    <h3>Queue</h3>

    @if (_votes is not null)
    {
        @foreach (var vote in _votes)
        {
            @if (vote.ClientId == _thisClientId)
            {
                <TrackCard Track="vote.VotedTrack" OnClickCallback="@RemoveVoteAsync" BtnFunc="TrackCard.BtnFunctionality.Remove" />
                // TODO: verify if the track is queued on Spotify already
            }
            else
            {
                <TrackCard Track="vote.VotedTrack"/>
            }
        }
    }

</MudStack>

@code {
    private Queue<Vote>? _votes;
    private string? _thisClientId;

    protected override async Task OnInitializedAsync()
    {
        _thisClientId = (await Sparkfly.GetThisClientAsync())?.ClientId;
        _votes = await Sparkfly.GetVotingQueueAsync();
    }

    private async Task RemoveVoteAsync(Track track)
    {
        await Sparkfly.RemoveVoteAsync(track);
        _votes = await Sparkfly.GetVotingQueueAsync();
        await InvokeAsync(StateHasChanged);     // NOTE: may not be necessary... see Blazor EventCallback with parameters
    }
}
