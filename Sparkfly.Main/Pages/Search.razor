@page "/search"

@using Sparkfly.Main.RequestAPI
@using Sparkfly.Main.Data
@using static Sparkfly.Main.Data.Track
@inject Spotify spotify

<MudStack>
    <form @onsubmit="SearchTracks">
        <MudContainer Class="px-0 mb-8">
            <MudTextField class="object-top" @bind-Value="UserInput" Label="Search for a track" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" />
        </MudContainer>
    </form>

    @if (SearchedTracks is not null)
    {
        @foreach (Track track in SearchedTracks)
        {
            <MudPaper Class="pa-4">
                <MudStack Row="true">
                    <MudImage ObjectFit="ObjectFit.Cover" Height="56" Width="56" Src=@track.CoverSizesUrl[(int)CoverSize.Small] Alt="Album cover" Elevation="25" Class="rounded-sm" />
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText Typo="Typo.body1">@track.SongName</MudText>
                        <MudText Typo="Typo.body2">@track.ArtistsNames[0]</MudText>
                    </MudStack>

                    <MudSpacer />

                    <div>
                        <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Color="Color.Success" aria-label="add to queue"></MudIconButton>
                    </div>
                </MudStack>
            </MudPaper>
        }
    }
</MudStack>

@code {
    public string? UserInput { get; set; }
    public List<Track>? SearchedTracks { get; set; }

    private async Task SearchTracks()
    {
        if (UserInput is not null)
            SearchedTracks = await spotify.SearchTracks(UserInput);
    }
}
