@page "/currently-playing"

@using Sparkfly.Main.Components
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@implements IDisposable

@inject NavigationManager NavigationManager
@inject SparkflyManager Sparkfly

<PageTitle>Listening to @_currentVote?.VotedTrack.ArtistsNames[0]</PageTitle>

<MudStack>
    <MudText Align="Align.Center" Typo="Typo.h6">You are listening to:</MudText>

    @if (_currentVote is not null)
    {
        <MudPaper Class="pa-4" MaxWidth="350px">
            <MudImage Class="rounded-lg align-self-center" Fluid="true" Src=@_currentVote.VotedTrack.CoverSizesUrl[(int)CoverSize.Medium] Alt="Album current playing" Elevation="25" />

            <MudDivider Class="my-4" DividerType="DividerType.Middle" />

            <MudText Align="Align.Center" Typo="Typo.body1">@_currentVote.VotedTrack.SongName</MudText>
            <MudText Align="Align.Center" Typo="Typo.body2">@_currentVote.VotedTrack.ArtistsNames[0]</MudText>
            <div class="d-flex justify-center mt-2">
                <MudText Typo="Typo.caption">Suggested by <strong>@_currentVote.Client.Name</strong>!</MudText>
            </div>
        </MudPaper>

        <MudText Class="mt-4" Align="Align.Center" Typo="Typo.h6">Playing next: </MudText>

        @if (_nextVote is not null)
        {
            <TrackCard Track="@_nextVote.VotedTrack" Client="_nextVote.Client" />
        }
    }
</MudStack>

@code {
    private Vote? _currentVote;
    private Vote? _nextVote;

    protected override void OnInitialized()
    {
        Sparkfly.TimerUpdateEvent += UpdateUi;
        Sparkfly.VotingQueueUpdateEvent += UpdateUi;

        UpdateUi(this, EventArgs.Empty);
    }

    private async void UpdateUi(object? source, EventArgs args)
    {
        _currentVote = Sparkfly.CurrentlyPlayingVote;
        _nextVote = Sparkfly.TryPeekVotingQueue();

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Sparkfly.TimerUpdateEvent -= UpdateUi;
        Sparkfly.VotingQueueUpdateEvent -= UpdateUi;
    }
}