@page "/currently-playing"

@using Sparkfly.Main.Components
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services

@implements IDisposable

@inject NavigationManager NavigationManager
@inject SparkflyManager Sparkfly
@inject IStringLocalizer<CurrentlyPlayingPage> Text

<PageTitle>@Text["listening_to"] @_currentVote?.VotedTrack.ArtistsNames[0]</PageTitle>

<MudStack>
    @if (_currentVote is not null && _currentVote.VotedTrack.SongId != "0")
    {
        <MudText Align="Align.Center" Typo="Typo.h4">@Text["playing_now"]</MudText>

        <MudPaper Class="pa-4" MaxWidth="350px">
            <MudImage Class="rounded-lg align-self-center" Fluid="true" Src=@_currentVote.VotedTrack.CoverSizesUrl[(int)CoverSize.Medium] Alt="Album current playing" Elevation="25" />

            <MudDivider Class="my-4" DividerType="DividerType.Middle" />

            <MudText Align="Align.Center" Typo="Typo.body1">@_currentVote.VotedTrack.SongName</MudText>
            <MudText Align="Align.Center" Typo="Typo.body2">@_currentVote.VotedTrack.ArtistsNames[0]</MudText>
            <div class="d-flex justify-center mt-2">
                <MudText Typo="Typo.caption">@Text["suggested_by"] <strong>@_currentVote.Client.Name</strong>!</MudText>
            </div>
        </MudPaper>

        @if (_nextVote is not null)
        {
            <MudText Class="mt-4" Align="Align.Center" Typo="Typo.h6">@Text["playing_next"]</MudText>

            <TrackCard Track="@_nextVote.VotedTrack" Client="_nextVote.Client" />
        }
    }
    else
    {
        <MudText Typo="Typo.h4" Align="Align.Center">
            @Text["nothing_playing_1"]
        </MudText>

        <MudImage Fluid="true" Width="400" Alt="Sad Taylor Swift" Class="rounded-lg my-4" Src="https://i.kym-cdn.com/photos/images/original/001/215/831/397.jpg" />

        <MudText Typo="Typo.body1" Align="Align.Center">
            @Text["nothing_playing_2"]
        </MudText>
        <MudText Typo="Typo.body1" Align="Align.Center">
            @Text["nothing_playing_3"]
        </MudText>
    }
</MudStack>

@code {
    private Vote? _currentVote;
    private Vote? _nextVote;
    private ExecutionContext? _originalContext;

    protected override void OnInitialized()
    {
        _originalContext = ExecutionContext.Capture();

        Sparkfly.TimerUpdateEvent += UpdateUi;
        Sparkfly.VotingQueueUpdateEvent += UpdateUi;

        UpdateUi(this, EventArgs.Empty);
    }

    private async void UpdateUi(object? source, EventArgs args)
    {
        _currentVote = Sparkfly.CurrentlyPlayingVote;
        _nextVote = Sparkfly.TryPeekVotingQueue();

        /* FIXED: page falling back to default culture - https://github.com/dotnet/aspnetcore/issues/28521 */
        if (_originalContext is not null)
        {
            ExecutionContext.Restore(_originalContext);

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        Sparkfly.TimerUpdateEvent -= UpdateUi;
        Sparkfly.VotingQueueUpdateEvent -= UpdateUi;
    }
}