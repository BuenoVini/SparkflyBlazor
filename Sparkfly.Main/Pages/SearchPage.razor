@page "/search"

@using Sparkfly.Main.Components
@using Sparkfly.Main.Services
@using Sparkfly.Main.Data

@inject SparkflyManager Sparkfly
@inject ProtectedSessionStorage ProtectedSession

<MudStack Class="d-flex flex-column flex-grow-1 gap-4">
    <form @onsubmit="SearchTracks">
        <MudContainer Class="px-0 mb-8">
            <MudTextField class="object-top" @bind-Value="_userInput" Label="Search for a track" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" />
        </MudContainer>
    </form>

    @if (_searchedTracks is not null)
    {
        @foreach (Track track in _searchedTracks)
        {
            <TrackCard Track="track" OnClickCallback="EnqueueVote" BtnFunc="TrackCard.BtnFunctionality.Add" />
        }
    }
    else
    {
        <TrackCard Track="new Track().MakeThisDummy()" />
    }
</MudStack>

@code {
    private string? _userInput;
    private List<Track>? _searchedTracks;
    private Client? _thisClient;

    protected override async Task OnInitializedAsync()
    {
        _thisClient = (await ProtectedSession.GetAsync<Client>("this_client")).Value;
    }

    private void EnqueueVote(Track track)
    {
        if (_thisClient is not null)
            Sparkfly.EnqueueVote(track, _thisClient);
    }

    private async Task SearchTracks()
    {
        try     // TODO: move the try-catch to SparkflyManager
        {
            if (_userInput is not null)
                _searchedTracks = await Sparkfly.SpotifySearchTracksAsync(_userInput);
        }
        catch (HttpRequestException e)
        {
            await Sparkfly.HandleHttpExceptionAsync(e);
        }
    }
}
