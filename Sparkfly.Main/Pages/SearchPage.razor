@page "/search"

@using Sparkfly.Main.Components
@using Sparkfly.Main.Services
@using Sparkfly.Main.Data
@using Sparkfly.Main.Services.RequestApi

@inject SparkflyManager Sparkfly
@inject NavigationManager NavManager
@inject ProtectedLocalStorage LocalStorage

<MudStack Class="d-flex flex-column flex-grow-1 gap-4">
    <form @onsubmit="SearchTracks">
        <MudContainer Class="px-0 mb-8">
            <MudTextField class="object-top" @bind-Value="_userInput" Label="Search for a track" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" />
        </MudContainer>
    </form>

    @if (_searchedTracks is not null)
    {
        // TODO: verify if vote is already on queue
        @foreach (Track track in _searchedTracks)
        {
            <TrackCard Track="track" OnClickCallback="EnqueueVote" BtnFunc="TrackCard.BtnFunctionality.Add" />
        }
    }
    else
    {
        <TrackCard Track="new Track().MakeThisDummy()" />
    }
</MudStack>

@code {
    private string? _userInput;
    private List<Track>? _searchedTracks;
    private Client? _thisClient;

    protected override async Task OnInitializedAsync()
    {
        _thisClient = (await LocalStorage.GetAsync<Client>("this_client")).Value;
    }

    private void EnqueueVote(Track track)
    {
        if (_thisClient is not null)
            Sparkfly.EnqueueVote(track, _thisClient);
    }

    private async Task SearchTracks()
    {
        if (_userInput is not null)
        {
            try
            {
                _searchedTracks = await Sparkfly.SpotifySearchTracksAsync(_userInput);
            }
            catch (Exception ex)
            {
                if (ex is SpotifyApiException || ex is HttpRequestException)
                    NavManager.NavigateTo("/unhandled-error" + QueryString.Create("message", ex.Message));
                else
                    throw;
            }
        }
    }
}
