<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about_1" xml:space="preserve">
    <value>Hi, my name is Vinícius but you can call me Vini. I am a Computer Science student living in Brazil. This web app is a personal project that I created to sharpen my C# skills (pun very much intended!).</value>
  </data>
  <data name="about_2" xml:space="preserve">
    <value>When I started my internship in 2022, I heard people talking about Blazor and how easy you could create Single Page Applications. The ideia behind Sparkfly was to create a service that would solve a common problem that my friends from college and from work were having.</value>
  </data>
  <data name="about_3" xml:space="preserve">
    <value>Every Friday, when I am commuting to college, the van's driver allows us to listen to Spotify. Concidently, every Friday at work, we listen to some music in the office too. The issue is that if you want to suggest a song to play, you would have to ask the owner of the Spotify account which songs to play next. That's when I had the idea to create Sparkfly.</value>
  </data>
  <data name="about_4" xml:space="preserve">
    <value>Also, since I decided to learn C# in 2022 I was thinking about a project I could build to put my skills in practice. Allied with my passion for listening to music, I was very pumped to start building this application and see my friends using it.</value>
  </data>
  <data name="about_5" xml:space="preserve">
    <value>I really hope you enjoy and have some fun sharing your favorite songs with you friends! This project was made with many sleepless nights but with a lot of love, for sure!</value>
  </data>
  <data name="about_6" xml:space="preserve">
    <value>If you have time, I'd be very happy if you visited my social medias!</value>
  </data>
  <data name="about_7" xml:space="preserve">
    <value>Oh, and why Sparkfly as the name? Well, you can find the answer if you know where to look at, but I won't be the one telling you where. Good luck!</value>
  </data>
  <data name="github" xml:space="preserve">
    <value>On my Github you can check previous projects I've worked on. (If you click the GitHub icon on the top right corner you'll be directed to projects's repo)</value>
  </data>
  <data name="hello" xml:space="preserve">
    <value>Hello there!</value>
  </data>
  <data name="lastfm" xml:space="preserve">
    <value>Lastly (another pun!), you can check the kinda music I'm into listening by checking my Last.fm profile. Spoiler alert: there's a lot of Taylor Swift!</value>
  </data>
  <data name="linkedin" xml:space="preserve">
    <value>If you liked Sparkfly, please send me a message on LinkedIn telling me your thoughts.</value>
  </data>
  <data name="page_title" xml:space="preserve">
    <value>About Sparkfly</value>
  </data>
  <data name="section_1" xml:space="preserve">
    <value>A bit about me</value>
  </data>
  <data name="section_2" xml:space="preserve">
    <value>The problem at hand</value>
  </data>
  <data name="section_3" xml:space="preserve">
    <value>Let's keep in touch!</value>
  </data>
  <data name="signature" xml:space="preserve">
    <value>Made with ❤️ by Vini Bueno.</value>
  </data>
  <data name="social_media" xml:space="preserve">
    <value>My social media profiles:</value>
  </data>
</root>